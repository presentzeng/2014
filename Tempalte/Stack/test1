#ifndef _stack_
#define _stack_
#include <iostream>
#include <vector>
#include <stdexcept>

template<typename T>
class Stack
{
private:
	std::vector<T>elem_;
public:
	void push(const T &t);
	void pop();
	T top()const;
	bool empty() const
	{ return elem_.empty();}
};

template<typename T>
void Stack<T>::push(const T &t)
{
	elem_.push_back(t);
}
template<typename T>
void Stack<T>::pop()
{
	if(elem_.empty())
		throw std::out_of_range("out of range");
	elem_.pop_back();
}
template<typename T>
T Stack<T>::top()const
{
	if(elem_.empty())
		throw std::out_of_range("o");
	return elem_.back();
}
#endif /*_stack_*/
